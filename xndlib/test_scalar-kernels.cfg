#
# The initial version of this file is generated using command:
#
#  xnd_tools config -m test_scalar examplelib/test_scalar.c
#
#  Editing instructions
#  --------------------
#  
#  1.1 MODULE section contains typemaps. Check that C type is correctly
#      mapped [OPTIONAL]. Other fields can also modified.
#  
#  1.2 MODULE section contains header_code that may contain C code that
#      is inserted after include statements of extension modules source.
#  
#  2.1 KERNEL name must be changed to appropriate one [REQUIRED].
#  
#  2.2 KERNEL section contains skip field. When present, the corrsponding
#      section will be ignored. When done editing the section, you can
#      delete the skip field. [REQUIRED]
#  
#  2.3 Prototypes field contains C function prototypes as retrieved from
#      the header files. There should be no need to edit prototypes.
#      Note that within a section all prototypes must have the same
#      arguments, only their type specification may differ.
#  
#  2.4 Section contains description field that will be used as doc string
#      of the kernel. Please fill it in [OPTIONAL].
#  
#  2.5 Dimension field field is used to specify dimensions of array
#      arguments. Please fill it in as follows [REQUIRED]:
#  
#        <argument name>(<dimension spec>)
#  
#      where <dimension spec> is a comma-separated list of dimensions.
#      All arguments not specified in dimension field are considered scalars.
#  
#  2.6 Section contains input/inplace/output/hide_arguments
#      fields. Please add argument names to the field as appropiate
#      [OPTIONAL]. Initial fillment is based on the use of const in
#      prototypes.
#  
#  2.7 Section contains pre/post_call_code that may contain C code that
#      is inserted before/after the call to the backend function
#      [OPTIONAL]. This is useful in special circumstances.
#  
#



[MODULE test_scalar]
typemaps = 
	long: int64
includes = 
	test_scalar.h
include_dirs = 
	examplelib
sources =
	examplelib/test_scalar.c
kinds = Xnd

ellipses = none
#ellipses = ..., var...
debug=False

[KERNEL test_scalar_input]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
input_arguments = a

[KERNEL test_scalar_inplace]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
inplace_arguments = a

[KERNEL test_scalar_inout]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
inout_arguments = a

[KERNEL test_scalar_input_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
input_arguments = a
output_arguments = a

[KERNEL test_scalar_inplace_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
inplace_arguments = a
output_arguments = a

[KERNEL test_scalar_inout_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
inout_arguments = a
output_arguments = a

[KERNEL test_scalar_output]
prototypes = 
	void test_scalar(long   a);
description = returns something
output_arguments = a

[KERNEL test_scalar_hide]
prototypes = 
	void test_scalar(long   a);
description = do nothing
hide_arguments = a


[KERNEL test_scalar_ptr_input]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input and does nothing
input_arguments = a

[KERNEL test_scalar_ptr_inplace]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input and increments by 10
inplace_arguments = a

[KERNEL test_scalar_ptr_inout]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input and increments by 10
inout_arguments = a

[KERNEL test_scalar_ptr_input_output]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input and returns increment by 10
input_arguments = a
output_arguments = a

[KERNEL test_scalar_ptr_inplace_output]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input, increments by 10 and returns
inplace_arguments = a
output_arguments = a

[KERNEL test_scalar_ptr_inout_output]
prototypes = 
	void test_scalar_ptr(long*   a);
description = takes input, increments by 10 and returns
inout_arguments = a
output_arguments = a

[KERNEL test_scalar_ptr_output]
prototypes = 
	void test_scalar_ptr(long*   a);
description = returns something incremented by 10
output_arguments = a

[KERNEL test_scalar_ptr_hide]
prototypes = 
	void test_scalar_ptr(long*   a);
description = do nothing
hide_arguments = a



[KERNEL test_scalar_return_input]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
input_arguments = a

[KERNEL test_scalar_return_inplace]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
inplace_arguments = a

[KERNEL test_scalar_return_inout]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
inout_arguments = a

[KERNEL test_scalar_return_output]
prototypes = 
	long test_scalar_return(long   a);
description = returns something increment by 20, two values
output_arguments = a

[KERNEL test_scalar_return_hide]
prototypes = 
	long test_scalar_return(long   a);
description = returns something increment by 20
hide_arguments = a

[KERNEL test_scalar_return_input_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
input_arguments = a
output_arguments = a

[KERNEL test_scalar_return_inplace_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
inplace_arguments = a
output_arguments = a

[KERNEL test_scalar_return_inout_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
inout_arguments = a
output_arguments = a



[KERNEL test_scalar_ptr_return_input]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns increment by 30
input_arguments = a

[KERNEL test_scalar_ptr_return_inplace]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, increments by 10, returns increment by 30
inplace_arguments = a

[KERNEL test_scalar_ptr_return_inout]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, increments by 10, returns increment by 30
inout_arguments = a

[KERNEL test_scalar_ptr_return_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = returns something increment by 30 and 10
output_arguments = a

[KERNEL test_scalar_ptr_return_hide]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = returns something increment by 30
hide_arguments = a

[KERNEL test_scalar_ptr_return_input_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns value and increment by 30
input_arguments = a
output_arguments = a

[KERNEL test_scalar_ptr_return_inplace_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns value incremented by 10 and increment by 30
inplace_arguments = a
output_arguments = a

[KERNEL test_scalar_ptr_return_inout_output]
prototypes = 
	long test_scalar_ptr_return(long *   a);
description = takes input, returns value incremented by 10 and increment by 30
inout_arguments = a
output_arguments = a

# WITH VALUES

[KERNEL test_scalar_value_input]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
input_arguments = a = 5

[KERNEL test_scalar_value_inplace]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
inplace_arguments = a = 5

[KERNEL test_scalar_value_inout]
prototypes = 
	void test_scalar(long   a);
description = takes input and does nothing
inout_arguments = a = 5

[KERNEL test_scalar_value_input_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
input_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_value_inplace_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
inplace_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_value_inout_output]
prototypes = 
	void test_scalar(long   a);
description = takes input and returns
inout_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_value_output]
prototypes = 
	void test_scalar(long   a);
description = returns something
output_arguments = a = 5

[KERNEL test_scalar_value_hide]
prototypes = 
	void test_scalar(long   a);
description = do nothing
hide_arguments = a = 5


[KERNEL test_scalar_ptr_value_input]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and does nothing
input_arguments = a = 5

[KERNEL test_scalar_ptr_value_inplace]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and does nothing
inplace_arguments = a = 5

[KERNEL test_scalar_ptr_value_inout]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and does nothing
inout_arguments = a = 5

[KERNEL test_scalar_ptr_value_input_output]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and returns
input_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_ptr_value_inplace_output]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and returns
inplace_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_ptr_value_inout_output]
prototypes = 
	void test_scalar_ptr(long *  a);
description = takes input and returns
inout_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_ptr_value_output]
prototypes = 
	void test_scalar_ptr(long *  a);
description = returns something
output_arguments = a = 5

[KERNEL test_scalar_ptr_value_hide]
prototypes = 
	void test_scalar_ptr(long *  a);
description = do nothing
hide_arguments = a = 5



[KERNEL test_scalar_value_return_input]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
input_arguments = a = 5

[KERNEL test_scalar_value_return_inplace]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
inplace_arguments = a = 5

[KERNEL test_scalar_value_return_inout]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns increment by 20
inout_arguments = a = 5

[KERNEL test_scalar_value_return_output]
prototypes = 
	long test_scalar_return(long   a);
description = returns something increment by 20, two values
output_arguments = a = 5

[KERNEL test_scalar_value_return_hide]
prototypes = 
	long test_scalar_return(long   a);
description = returns something increment by 20
hide_arguments = a = 5

[KERNEL test_scalar_value_return_input_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
input_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_value_return_inplace_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
inplace_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_value_return_inout_output]
prototypes = 
	long test_scalar_return(long   a);
description = takes input, returns value and increment by 20
inout_arguments = a = 5
output_arguments = a


[KERNEL test_scalar_ptr_value_return_input]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns increment by 20
input_arguments = a = 5

[KERNEL test_scalar_ptr_value_return_inplace]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns increment by 20
inplace_arguments = a = 5

[KERNEL test_scalar_ptr_value_return_inout]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns increment by 20
inout_arguments = a = 5

[KERNEL test_scalar_ptr_value_return_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = returns something increment by 20, two values
output_arguments = a = 5

[KERNEL test_scalar_ptr_value_return_hide]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = returns something increment by 20
hide_arguments = a = 5

[KERNEL test_scalar_ptr_value_return_input_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns value and increment by 20
input_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_ptr_value_return_inplace_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns value and increment by 20
inplace_arguments = a = 5
output_arguments = a

[KERNEL test_scalar_ptr_value_return_inout_output]
prototypes = 
	long test_scalar_ptr_return(long *  a);
description = takes input, returns value and increment by 20
inout_arguments = a = 5
output_arguments = a