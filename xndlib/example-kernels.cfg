# This file is generated from /home/pearu/anaconda3/envs/xnd-tools/lib/python3.6/site-packages/xndtools/kernel_generator/generate_config.py and requires editing.
#  
#  Editing instructions
#  --------------------
#  
#  1.1 MODULE section contains typemaps. Check that C type is correctly
#      mapped [OPTIONAL]. Other fields can also modified.
#  
#  1.2 MODULE section contains header_code that may contain C code that
#      is inserted after include statements of extension modules source.
#  
#  2.1 FUNCTION name must be changed to appropriate one [REQUIRED].
#  
#  2.2 FUNCTION section contains skip field. When present, the corrsponding
#      section will be ignored. When done editing the section, you can
#      delete the skip field. [REQUIRED]
#  
#  2.3 Prototypes field contains C function prototypes as retrieved from
#      the header files. There should be no need to edit prototypes.
#      Note that within a section all prototypes must have the same
#      arguments, only their type specification may differ.
#  
#  2.4 Section contains description field that will be used as doc string
#      of the kernel. Please fill it in [OPTIONAL].
#  
#  2.5 Dimension field field is used to specify dimensions of array
#      arguments. Please fill it in as follows [REQUIRED]:
#  
#        <argument name>(<dimension spec>)
#  
#      where <dimension spec> is a comma-separated list of dimensions.
#      All arguments not specified in dimension field are considered scalars.
#  
#  2.6 Section contains input/inplace/output/hide_arguments
#      fields. Please add argument names to the field as appropiate
#      [OPTIONAL]. Initial fillment is based on the use of const in
#      prototypes.
#  
#  2.7 Section contains pre/post_call_code that may contain C code that
#      is inserted before/after the call to the backend function
#      [OPTIONAL]. This is useful in special circumstances.
#  
#  
[MODULE example]
typemaps = 
	double: float64
	float: float32
	int: int32
	long: int64
includes = 
	example.h
include_dirs = 
	examplelib
sources =
	examplelib/example.c

libraries = 
	
library_dirs = 
	
header_code = 

ellipses = ...

[KERNEL example_sum]
skip = True
prototypes = 
	void d_example_sum(long   n, double *  x, double *  r);
	void s_example_sum(long   n, float *  x, float *  r);
	void i_example_sum(long   n, int *  x, int *  r);
description =
  Compute the sum of x elements.
dimension = x(n)
input_arguments = x
output_arguments = r
hide_arguments = r, n = len(x)


[KERNEL add_one]
skip = True
prototypes = 
	void d_add_one(double   x, double *  r);
	void i_add_one(int   x, int *  r);
	void l_add_one(long   x, long *  r);
	void s_add_one(float   x, float *  r);
description = Computer increment by one.
input_arguments = x
inplace_arguments = 
output_arguments = r
hide_arguments = r

[KERNEL scalar_intent_in]
#skip = True
ellipses = ..., var...
description = Add one.
prototypes = 
	int int_intent_in(int   a);
	double double_intent_in(double   a);
input_arguments = a

[KERNEL scalar_ptr_intent_in]
#skip = True
prototypes = 
	double double_p_intent_in(double *  a);
	int int_p_intent_in(int *  a);
input_arguments = a

[KERNEL array_intent_in]
#debug = True
kinds = C, Fortran, Xnd
ellipses = ...
arraytypes = symbolic
prototypes = 
	double doublearr_intent_in(double *  arr, int n);
	int intarr_intent_in(int *  arr, int n);
dimension = arr(n)
input_arguments = arr
hide_arguments = n = len(arr)


[KERNEL array_2d_intent_in]
ellipses = ...
prototypes =
	double doublearr_2d_c_intent_in(double *  a, int   m, int   n);
prototypes_C =
	double doublearr_2d_c_intent_in(double *  a, int   m, int   n);
prototypes_Fortran =
        double doublearr_2d_f_intent_in(double *  a, int   m, int   n);
kinds = Xnd
dimension = a(m, n)
input_arguments = a
hide_arguments = m = shape(a, 0), n = shape(a, 1)
